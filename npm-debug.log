0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish',
1 verbose cli   './',
1 verbose cli   '--tag',
1 verbose cli   'beta' ]
2 info using npm@2.14.9
3 info using node@v4.2.1
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec Result {
7 silly cache add   raw: './',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/home/behzad/Projects/Intellibits/middle-gear',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/behzad/.npm/middle-gear/0.1.2/package.tgz not in flight; packing
9 verbose tar pack [ '/home/behzad/.npm/middle-gear/0.1.2/package.tgz',
9 verbose tar pack   '/home/behzad/Projects/Intellibits/middle-gear' ]
10 verbose tarball /home/behzad/.npm/middle-gear/0.1.2/package.tgz
11 verbose folder /home/behzad/Projects/Intellibits/middle-gear
12 info prepublish middle-gear@0.1.2
13 verbose addLocalTarball adding from inside cache /home/behzad/.npm/middle-gear/0.1.2/package.tgz
14 silly cache afterAdd middle-gear@0.1.2
15 verbose afterAdd /home/behzad/.npm/middle-gear/0.1.2/package/package.json not in flight; writing
16 verbose afterAdd /home/behzad/.npm/middle-gear/0.1.2/package/package.json written
17 silly publish { name: 'middle-gear',
17 silly publish   version: '0.1.2',
17 silly publish   description: 'A View Engine for NodeJs Web applications.',
17 silly publish   main: 'index.js',
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   dependencies: { lodash: '^3.10.1' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/intellibits/middle-gear.git' },
17 silly publish   keywords:
17 silly publish    [ 'nodejs template engin',
17 silly publish      'nodjs view engine',
17 silly publish      'shorthand html' ],
17 silly publish   author: { name: 'Behzad Eshan', email: 'behzad.eshan@intellibits.org' },
17 silly publish   license: 'BSD-2-Clause',
17 silly publish   bugs: { url: 'https://github.com/intellibits/middle-gear/issues' },
17 silly publish   homepage: 'https://github.com/intellibits/middle-gear#readme',
17 silly publish   readme: 'v0.1.2\n\n# Middle Gear\n**Middle Gear** is a View Engine for NodeJs Web applications. It\'s in **beta** version, don\'t use it in production please.\n\n* [Installation](#installation)\n* [Let\'s Start](#lets-start)\n* [Adding dynamic value to markup](#adding-dynamic-value-to-markup)\n* [Sending data to markup from Controller](#sending-data-to-markup-from-controller)\n* [Inheritance](#inheritance)\n* [Putting tags in a same line](#putting-tags-in-a-same-line)\n* [Breaking line into multiple lines](#breaking-line-into-multiple-lines)\n* [Plain text](#plain-text)\n* [Adding Script and Style blocks to markup](#adding-script-and-style-blocks-to-markup)\n* [Server Side JavaScript inside Script and Style tags](#server-side-javascript-inside-script-and-style-tags)\n* [Using custom tags in Melody](#using-custom-tags-in-melody)\n* [Shorthands](#shorthands)\n* [Commenting](#commenting)\n* [Third party framework support](#third-party-framework-support)\n  * [Angular](#angular)\n  * [SailsJs](#sailsJs)\n  * [Lodash](#lodash)\n* [What about Controller code?](#what-about-Controller-code)\n\n### Installation\n\n`npm install middle-gear`\n\n### Let\'s Start\n*Middle Gear* has provided a language named **Melody**. But you will not forced to learn a new language. **Melody** is **HTML** plus **JavaScript**. With *Melody* You can **mix** JavaScript with HTML easily. There are a few simple rules to write *Melody*:\n\n* Drop `<`, `>` or `/>` from your start tags (ex. ```</div> <br/>```).\n* Remove end tags (ex. ```</div>```) entirely.\n* Place tag\'s text (ex. ```<span>It\'s Text</span>```) inside quote marks `\'` or `"` or even backtick `` ` ``.\n* Use `indention` for applying HTML hierarchy. \n* When putting HTML tags inside a JavaScript block apply `indention` rule too. \n\n```\nvar colors = [\'Blue\',\'Green\',\'Red\'];\ntable\n  for (var i = 0; i < colors.length; i++) {    \n      tr\n        td \'@{colors[i]}\'\n  }\n```\n**Tip**: As you see, we have used `indention` to place the `for` expression inside of the `table` tag. We have done the same, for the `tr` to tell it\'s inside of the `for`. Note that placing a tag inside of code block(`{` ,`}`) will not make it as a subset of that code block, so using `indention` is a must everywhere.\n\n**Note:** It\'s not possible to mix JavaScript and HTML in one line.\n\n### Adding dynamic value to markup\nAs you see in above example, we are using `@{}` for adding dynamic values to our markup. Inside the **Dynamic value block**, you can use any expression that returns a value. All of following expressions are acceptable:\n\n```\nspan \'1+1=@{1+1}\'\n\'@{parsInt("1")}\'\n\'@{1===1? true : false}\'\ninput name="@{username}"\n```\n\n### Sending data to markup from *Controller*\n*Middle Gear* is supporting **MVC** architecture. It means you can send **Model** to a Melody **View**.\n```\ndiv\n  span "@{model.msg}"\n```\n**Note**: As you see we have used `model` object for accessing the data that has been sent from `controller`.\n\n### Inheritance\n```\n//layout.mel\nhtml\n  head\n    title \'Middle Gear - Hello World\'\n  body\n    load name="content"\n```\n```\n//index.mel\nlayout src="layout.mel"\nsector name="content"\n  span "Hello world!"\n```\n### Putting tags in a same line\nUse `>` for separating tags that are in the same line:\n```\nul.dropdown-menu\n    li > a href="#" \'Action\'\n    li > a href="#" \'Another action\'\n```\n### Breaking line into multiple lines\nFor doing this, use `,` at the end of line:\n```\n    button.btn.btn-default.dropdown-toggle,\ntype="button",\nid="dropdownMenu2",\ndata-toggle="dropdown",\naria-haspopup="true" aria-expanded="false"\n```\n**Note**: As you see, it\'s not needed to follow `indention` rule for the broken lines.\n\n### Plain text\nBrowsers eliminate whitespaces but not *Middle Gear*. Everything that is written inside quote marks will be rendered in the same way.\n```\n  div\n    pre\n"It\'s a \n    multi line\nplain\ntext"\n```\n\n### Adding Script and Style blocks to markup\nAdding *Script* and *Style* is as same as other tags. \n```\nStyle\n  body {\n    font: "tahoma"\n  }\nScript\n  alert(\'Hello world!\')\n```\n### Server Side JavaScript inside Script and Style tags\nYou can control the rendering of the client-side JavaScript and also CSS using *Melody*. For this you should explicitly express that you are writing server side JavaScript expression by adding `\\` to the start of your code lines.\n```\nvar en_msg="Hello world!",\n  fa_msg= درود بر شما!;\n\nStyle\n  body {\n    \\if(model.lang===\'en\')\n      font: "tahoma"\n    \\else if(model.lang==="fa")\n      font: "b roya"\n  }\nScript  \n  \\if(model.lang===\'en\')\n    alert(\'@{en_msg}\')\n  \\else if(model.lang==="fa")\n    alert(\'@{fa_msg}\')\n```\n### Using custom tags in Melody\nFor adding non-HTML5 tags to your markup you should explicitly express it using `>` before the name of tag.\n```\ndiv\n  > custom-tag \n```\n\n### Shorthands\nMelody supports shorthand for writing tags:\n\n* Use `#` after tag\'s name for adding id:\n\n```\ninput#username\ninput #username\n```\n\n* Use `.` after tag\'s name or id for adding class:\n\n```\ninput #username .class1 .class2\ninput.class1.class2#username \n```\n\n### Commenting\nLike JavaScript, can use `//` and `/*..*/` for commenting.\n\n### Third party framework support\n#### **Angular**\nCurrent version of *Middle Gear* compiler supports **Angular 2.0** syntax.\n\n```\ndiv\n    span *ng-if="expression" #localValue [(two-way-binding)]="prop"\n        \'Hello Angular 2.0\'\n```\n\n#### SailsJs\nFor setting *Middle Gear* as **SailsJs** view engine, modify `view.js` file from `config folder` to look like this:\n\n```\n//view.js\nmodule.exports.views = {\n   engine: {\n      ext: \'mel\',\n      fn: function(filename, options, fn) {\n         var path = require(\'path\');\n         var basename = path.basename(filename);\n         var viewEngine = new (require(\'middle-gear\'))({\n            rootDirname: path.dirname(filename)\n         });\n         if(!options.model) options.model = {};\n         var markup = viewEngine.renderFile(basename, options.model);\n         fn(null, markup);\n      }\n   }\n };\n```\n\n#### Lodash\n*Middle Gear* compiles *Melody language* in Sand Box mode, so you can\'t access to your **npm packages** that you have added to your project. However **lodash** is injected to view by default, so you can use it in your view code.\n\n```\nvar colors = [\'Blue\', \'Green\', \'Red\'];\ntable\n    _.each(colors, function(color) {\n        tr\n            td \'@{color}\'\n    })\n```\n\n### What about *Controller* code?\n```\nvar viewEngine = new(require(\'../index\'))({\n  rootDirname: __dirname\n});\nvar markup = viewEngine.renderFile(\'ex-1\', {\n  msg: \'This message is from Controller\',\n  lang: \'en\'\n});\nconsole.log(markup);\n```\n**Note**: `.mel` prefix is abbreviation for **Melody**. You can drop it in `src` attributes and `renderFile` method but for it your file must perfixed with `.mel`.\n\n---\n*Any suggestion?*\n*Have fun! :)*\n*Behzad Eshan*',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'df619c16e3d07f35ee44d5476d693e7bd58e29a1',
17 silly publish   _id: 'middle-gear@0.1.2',
17 silly publish   _shasum: '6d461373c1d23b998dccf8eb207d23640888c4ca',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name middle-gear
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/middle-gear
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/behzad/.npm/middle-gear/0.1.2/package.tgz
25 verbose request uri https://registry.npmjs.org/middle-gear
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 6:36:16 AM
28 verbose request using bearer token for auth
29 verbose request id 686b02826ffed385
30 http request PUT https://registry.npmjs.org/middle-gear
31 http 403 https://registry.npmjs.org/middle-gear
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Mon, 09 Nov 2015 00:36:20 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-fra1236-FRA',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1447029378.226620,VS0,VE2230' }
33 verbose request invalidating /home/behzad/.npm/registry.npmjs.org/middle-gear on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.1.2." : middle-gear
35 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1082:10)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
36 verbose statusCode 403
37 verbose pkgid middle-gear
38 verbose cwd /home/behzad/Projects/Intellibits/middle-gear
39 error Linux 4.2.0-17-generic
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish" "./" "--tag" "beta"
41 error node v4.2.1
42 error npm  v2.14.9
43 error code E403
44 error "You cannot publish over the previously published version 0.1.2." : middle-gear
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
